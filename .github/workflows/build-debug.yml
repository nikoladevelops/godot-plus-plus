name: Build GDExtension CROSS PLATFORM PLUGIN
on:
  workflow_dispatch:

env:
  PLUGIN_NAME: "plugin_name_goes_here" # Replace with your plugin name (must match .gdextension file name)

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # A build is made for every possible combination of parameters
        # You can add or remove entries from the arrays of each parameter to customize which builds you want to run
        # See https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/running-variations-of-jobs-in-a-workflow
        target:
          [
            { platform: linux, arch: x86_32, os: ubuntu-22.04 },
            { platform: linux, arch: x86_64, os: ubuntu-22.04 },
          #  { platform: linux, arch: arm32, os: ubuntu-22.04-arm },
          #  { platform: linux, arch: arm64, os: ubuntu-22.04-arm },
          #  { platform: windows, arch: x86_32, os: windows-latest },
          #  { platform: windows, arch: x86_64, os: windows-latest },
          #  { platform: windows, arch: arm64, os: windows-latest },
          #  { platform: macos, arch: universal, os: macos-latest },
          #  { platform: android, arch: x86_64, os: ubuntu-22.04 },
          #  { platform: android, arch: arm32, os: ubuntu-22.04 },
          #  { platform: android, arch: arm64, os: ubuntu-22.04 },
          #  { platform: ios, arch: arm64, os: macos-latest },
           { platform: web, arch: wasm32, os: ubuntu-22.04, threads: disabled },
           { platform: web, arch: wasm32, os: ubuntu-22.04, threads: enabled }
          ]
        target-type: [template_debug] #template_release]
        float-precision: [single] #[double] -> if you need double precision, you can uncomment this line and add it to the matrix

    runs-on: ${{ matrix.target.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install multilib support
        if: ${{ matrix.target.platform == 'linux' && matrix.target.arch == 'x86_32' }}
        run: |
          sudo apt-get update && sudo apt-get install -y gcc-multilib g++-multilib

      # Setup dependencies
      - name: Setup godot-cpp
        uses: ./godot-cpp/.github/actions/setup-godot-cpp
        with:
          platform: ${{ matrix.target.platform }}
          em-version: 3.1.62

      - name: Restore .scons_cache
        uses: ./godot-cpp/.github/actions/godot-cache-restore
        with:
          scons-cache: ${{ github.workspace }}/.scons-cache/
          cache-name: ${{ matrix.target.platform }}_${{ matrix.target.arch }}_${{ matrix.float-precision }}_${{ matrix.target-type }}${{ (matrix.target.platform == 'web' && matrix.target.threads == 'enabled') && '.threads' || '' }}

      - name: Build GDExtension
        shell: sh
        env:
          SCONS_CACHE: ${{ github.workspace }}/.scons-cache/
        run: |
          THREADS_FLAG=""
          if [ "${{ matrix.target.platform }}" = "web" ]; then
            if [ "${{ matrix.target.threads }}" = "enabled" ]; then
              THREADS_FLAG=" threads=yes"
            else
              THREADS_FLAG=" threads=no"
            fi
          fi
          scons target=${{ matrix.target-type }} platform=${{ matrix.target.platform }} arch=${{ matrix.target.arch }} precision=${{ matrix.float-precision }}$THREADS_FLAG

      - name: Save .scons_cache
        uses: ./godot-cpp/.github/actions/godot-cache-save
        with:
          scons-cache: ${{ github.workspace }}/.scons-cache/
          cache-name: ${{ matrix.target.platform }}_${{ matrix.target.arch }}_${{ matrix.float-precision }}_${{ matrix.target-type }}${{ (matrix.target.platform == 'web' && matrix.target.threads == 'enabled') && '_threads' || '' }}

      - name: Windows - Delete compilation files
        if: ${{ matrix.target.platform == 'windows' }}
        shell: pwsh
        run: Remove-Item bin/* -Include *.exp,*.lib,*.pdb -Force

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.platform }}.${{ matrix.target.arch }}.${{ matrix.float-precision }}.${{ matrix.target-type }}${{ (matrix.target.platform == 'web' && matrix.target.threads == 'enabled') && '.threads' || '' }}
          path: ${{ github.workspace }}/bin/**

  merge:
    runs-on: ubuntu-22.04
    needs: build
    env:
      PLUGIN_NAME: plugin_name_goes_here # Make sure this matches your env var
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create artifacts directory
        # The script will create the final plugin structure dynamically
        run: mkdir -p artifacts

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          # No 'name' is specified, so all artifacts from the workflow run will be downloaded.
          # Each artifact will be placed in a separate directory inside 'artifacts/'.
          path: artifacts

      - name: List downloaded files for debugging
        run: ls -R artifacts

      - name: Organize artifacts by platform
        run: |
          # Create the top-level plugin directory that will be zipped
          mkdir -p ${{ env.PLUGIN_NAME }}/bin
          
          # Loop through each downloaded artifact directory inside 'artifacts'
          for artifact_dir in artifacts/*/; do
            # Remove trailing slash to get the directory name, which is the artifact name
            artifact_name=$(basename "$artifact_dir")
            
            # Extract platform name (the part before the first '.')
            platform=$(echo "$artifact_name" | cut -d'.' -f1)
            
            # Define the target directory for this platform's binaries
            target_dir="${{ env.PLUGIN_NAME }}/bin/$platform"
            
            echo "Creating target directory: $target_dir"
            mkdir -p "$target_dir"
            
            # Copy all files from the downloaded artifact directory to the new platform-specific directory
            echo "Copying files from $artifact_dir to $target_dir"
            cp -r "$artifact_dir"* "$target_dir/"
          done

      - name: Copy .gdextension file
        run: cp "test_project/${{ env.PLUGIN_NAME }}/${{ env.PLUGIN_NAME }}.gdextension" "${{ env.PLUGIN_NAME }}/${{ env.PLUGIN_NAME }}.gdextension"
        
      - name: Copy LICENSE.md
        run: |
          if [ -f LICENSE.md ]; then
            cp "LICENSE.md" "${{ env.PLUGIN_NAME }}/LICENSE.md"
          fi

      - name: List final bin contents for debugging
        run: ls -R ${{ env.PLUGIN_NAME }}

      - name: Create zip archive
        run: zip -r ${{ env.PLUGIN_NAME }}.zip ${{ env.PLUGIN_NAME }}

      - name: Upload final artifact
        uses: actions/upload-artifact@v4
        with:
          name: "unzip-me"
          path: "${{ env.PLUGIN_NAME }}.zip"