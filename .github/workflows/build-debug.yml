name: Build GDExtension (Debug)
on:
  workflow_dispatch:
    inputs:
      godot_version:
        description: 'Godot version (e.g., 4.4.1, 4.4, 4.3, 4.5-beta4)'
        default: '4.4.1'

env:
  GODOT_VERSION: ${{ github.event.inputs.godot_version || '4.4.1' }}  # Default to 4.4.1

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # A build is made for every possible combination of parameters
        # You can add or remove entries from the arrays of each parameter to customize which builds you want to run
        # See https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/running-variations-of-jobs-in-a-workflow
        target:
          [
           { platform: linux, arch: x86_32, os: ubuntu-22.04 },
           { platform: linux, arch: x86_64, os: ubuntu-22.04 },
           { platform: linux, arch: arm32, os: ubuntu-22.04-arm },
           { platform: linux, arch: arm64, os: ubuntu-22.04-arm },
           { platform: windows, arch: x86_32, os: windows-latest },
           { platform: windows, arch: x86_64, os: windows-latest },
           { platform: windows, arch: arm64, os: windows-latest },
           { platform: macos, arch: universal, os: macos-latest },
           { platform: android, arch: x86_64, os: ubuntu-22.04 },
           { platform: android, arch: arm32, os: ubuntu-22.04 },
           { platform: android, arch: arm64, os: ubuntu-22.04 },
           { platform: ios, arch: arm64, os: macos-latest },
           { platform: web, arch: wasm32, os: ubuntu-22.04, threads: disabled },
           { platform: web, arch: wasm32, os: ubuntu-22.04, threads: enabled }
          ]
        target-type: [template_debug] #template_release]
        float-precision: [single] #[double] -> if you need double precision, you can uncomment this line and add it to the matrix

    runs-on: ${{ matrix.target.os }}
    steps:
      # Clone this repository
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      # Lint
      #- name: Setup clang-format
      #  shell: bash
      #  run: |
      #    python -m pip install clang-format
      #- name: Run clang-format
      #  shell: bash
      #  run: |
      #    clang-format src/** --dry-run --Werror

      # Add linux x86_32 toolchain
      - name: Install multilib support
        if: ${{ matrix.target.platform == 'linux' && matrix.target.arch == 'x86_32' }}
        run: |
          sudo apt-get update && sudo apt-get install -y gcc-multilib g++-multilib

      # Setup dependencies
      - name: Setup godot-cpp
        uses: ./godot-cpp/.github/actions/setup-godot-cpp
        with:
          platform: ${{ matrix.target.platform }}
          em-version: 3.1.62

      - name: Restore .scons_cache
        uses: ./godot-cpp/.github/actions/godot-cache-restore
        with:
          scons-cache: ${{ github.workspace }}/.scons-cache/
          cache-name: ${{ matrix.target.platform }}_${{ matrix.target.arch }}_${{ matrix.float-precision }}_${{ matrix.target-type }}

      - name: Build GDExtension Debug Build
        shell: sh
        env:
          SCONS_CACHE: ${{ github.workspace }}/.scons-cache/
        run: |
          scons target=${{ matrix.target-type }} platform=${{ matrix.target.platform }} arch=${{ matrix.target.arch }} precision=${{ matrix.float-precision }}

      - name: Save .scons_cache
        uses: ./godot-cpp/.github/actions/godot-cache-save
        with:
          scons-cache: ${{ github.workspace }}/.scons-cache/
          cache-name: ${{ matrix.target.platform }}_${{ matrix.target.arch }}_${{ matrix.float-precision }}_${{ matrix.target-type }}

      # Clean up compilation files
      - name: Windows - Delete compilation files
        if: ${{ matrix.target.platform == 'windows' }}
        shell: pwsh
        run: |
          Remove-Item bin/* -Include *.exp,*.lib,*.pdb -Force

      # Platform-specific Setup Godot steps
      # Note: Some architectures may not have official Godot binaries available (e.g., Linux arm32/arm64/x86_32, Windows arm64 for standard builds).
      # If downloads fail, consider skipping tests for those or using .NET/Mono variants where available.

      - name: Setup Godot - Linux
        if: ${{ matrix.target.platform == 'linux' }}
        shell: bash
        run: |
          GODOT_ENGINE_DIR="${{ github.workspace }}/godot_engine"
          WORKSPACE="${{ github.workspace }}"
          GODOT_BINARY_SUFFIX="linux.${{ matrix.target.arch }}.zip"
          GODOT_BINARY_URL="https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_${GODOT_BINARY_SUFFIX}"
          mkdir -p "$GODOT_ENGINE_DIR"
          # Download with curl
          for attempt in {1..3}; do
            curl -L --retry 3 --connect-timeout 30 "$GODOT_BINARY_URL" -o "$GODOT_ENGINE_DIR/godotengineexecutable.zip" && break
            echo "Download attempt $attempt failed, retrying..."
            sleep 5
          done
          if [ ! -f "$GODOT_ENGINE_DIR/godotengineexecutable.zip" ]; then
            echo "Error: Failed to download Godot binary"
            exit 1
          fi
          unzip "$GODOT_ENGINE_DIR/godotengineexecutable.zip" -d "$GODOT_ENGINE_DIR"
          # Debug: List contents
          echo "Current directory: $(pwd)"
          echo "Contents of godot_engine/:"
          ls -R "$GODOT_ENGINE_DIR"
          # Find and rename executable
          GODOT_EXEC_PATH="$GODOT_ENGINE_DIR/godotengineexecutable"
          BINARY_SUFFIX="${{ matrix.target.arch == 'x86_32' && 'linux.x86_32' || matrix.target.arch == 'x86_64' && 'linux.x86_64' || matrix.target.arch == 'arm32' && 'linux.arm32' || 'linux.arm64' }}"
          BINARY=$(find "$GODOT_ENGINE_DIR" -maxdepth 1 -type f -name "Godot_v${{ env.GODOT_VERSION }}-stable_${BINARY_SUFFIX}")
          if [ -z "$BINARY" ]; then
            echo "Error: Linux binary not found"
            exit 1
          fi
          mv "$BINARY" "$GODOT_EXEC_PATH"
          chmod +x "$GODOT_EXEC_PATH"
          if [ ! -f "$GODOT_EXEC_PATH" ]; then
            echo "Error: Godot executable not found at $GODOT_EXEC_PATH"
            exit 1
          fi
          echo "GODOT_EXECUTABLE=$GODOT_EXEC_PATH" >> $GITHUB_ENV
          # Verify test project and scene
          if [ ! -f "$WORKSPACE/test_project/project.godot" ]; then
            echo "Error: Test project directory $WORKSPACE/test_project/project.godot not found"
            exit 1
          fi
          if [ ! -f "$WORKSPACE/test_project/plugin-tests/plugin-tests.tscn" ]; then
            echo "Error: Test scene $WORKSPACE/test_project/plugin-tests/plugin-tests.tscn not found"
            exit 1
          fi

      - name: Setup Godot - Windows
        if: ${{ matrix.target.platform == 'windows' }}
        shell: bash
        run: |
          GODOT_ENGINE_DIR=$(cygpath -u "${{ github.workspace }}\\godot_engine")
          WORKSPACE=$(cygpath -u "${{ github.workspace }}")
          GODOT_BINARY_SUFFIX="${{ matrix.target.arch == 'x86_32' && 'win32.exe.zip' || matrix.target.arch == 'x86_64' && 'win64.exe.zip' || 'windows_arm64.exe.zip' }}"
          GODOT_BINARY_URL="https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_${GODOT_BINARY_SUFFIX}"
          mkdir -p "$GODOT_ENGINE_DIR"
          # Download with curl
          for attempt in {1..3}; do
            curl -L --retry 3 --connect-timeout 30 "$GODOT_BINARY_URL" -o "$GODOT_ENGINE_DIR/godotengineexecutable.zip" && break
            echo "Download attempt $attempt failed, retrying..."
            sleep 5
          done
          if [ ! -f "$GODOT_ENGINE_DIR/godotengineexecutable.zip" ]; then
            echo "Error: Failed to download Godot binary"
            exit 1
          fi
          unzip "$GODOT_ENGINE_DIR/godotengineexecutable.zip" -d "$GODOT_ENGINE_DIR"
          # Debug: List contents
          echo "Current directory: $(pwd)"
          echo "Contents of godot_engine/:"
          ls -R "$GODOT_ENGINE_DIR"
          # Find and rename executable
          GODOT_EXEC_PATH="$GODOT_ENGINE_DIR/godotengineexecutable.exe"
          BINARY_SUFFIX="${{ matrix.target.arch == 'x86_32' && 'win32.exe' || matrix.target.arch == 'x86_64' && 'win64.exe' || 'windows_arm64.exe' }}"
          BINARY=$(find "$GODOT_ENGINE_DIR" -maxdepth 1 -type f -name "Godot_v${{ env.GODOT_VERSION }}-stable_${BINARY_SUFFIX}")
          if [ -z "$BINARY" ]; then
            echo "Error: Windows binary not found"
            exit 1
          fi
          mv "$BINARY" "$GODOT_EXEC_PATH"
          if [ ! -f "$GODOT_EXEC_PATH" ]; then
            echo "Error: Godot executable not found at $GODOT_EXEC_PATH"
            exit 1
          fi
          echo "GODOT_EXECUTABLE=$GODOT_EXEC_PATH" >> $GITHUB_ENV
          # Verify test project and scene
          if [ ! -f "$WORKSPACE/test_project/project.godot" ]; then
            echo "Error: Test project directory $WORKSPACE/test_project/project.godot not found"
            exit 1
          fi
          if [ ! -f "$WORKSPACE/test_project/plugin-tests/plugin-tests.tscn" ]; then
            echo "Error: Test scene $WORKSPACE/test_project/plugin-tests/plugin-tests.tscn not found"
            exit 1
          fi

      - name: Setup Godot - macOS
        if: ${{ matrix.target.platform == 'macos' }}
        shell: bash
        run: |
          GODOT_ENGINE_DIR="${{ github.workspace }}/godot_engine"
          WORKSPACE="${{ github.workspace }}"
          GODOT_BINARY_SUFFIX="macos.universal.zip"
          GODOT_BINARY_URL="https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_${GODOT_BINARY_SUFFIX}"
          mkdir -p "$GODOT_ENGINE_DIR"
          # Download with curl
          for attempt in {1..3}; do
            curl -L --retry 3 --connect-timeout 30 "$GODOT_BINARY_URL" -o "$GODOT_ENGINE_DIR/godotengineexecutable.zip" && break
            echo "Download attempt $attempt failed, retrying..."
            sleep 5
          done
          if [ ! -f "$GODOT_ENGINE_DIR/godotengineexecutable.zip" ]; then
            echo "Error: Failed to download Godot binary"
            exit 1
          fi
          unzip "$GODOT_ENGINE_DIR/godotengineexecutable.zip" -d "$GODOT_ENGINE_DIR"
          # Debug: List contents
          echo "Current directory: $(pwd)"
          echo "Contents of godot_engine/:"
          ls -R "$GODOT_ENGINE_DIR"
          # Find and rename executable
          GODOT_EXEC_PATH="$GODOT_ENGINE_DIR/Godot.app/Contents/MacOS/godotengineexecutable"
          mv "$GODOT_ENGINE_DIR/Godot.app/Contents/MacOS/Godot" "$GODOT_EXEC_PATH"
          chmod +x "$GODOT_EXEC_PATH"
          if [ ! -f "$GODOT_EXEC_PATH" ]; then
            echo "Error: Godot executable not found at $GODOT_EXEC_PATH"
            exit 1
          fi
          echo "GODOT_EXECUTABLE=$GODOT_EXEC_PATH" >> $GITHUB_ENV
          # Verify test project and scene
          if [ ! -f "$WORKSPACE/test_project/project.godot" ]; then
            echo "Error: Test project directory $WORKSPACE/test_project/project.godot not found"
            exit 1
          fi
          if [ ! -f "$WORKSPACE/test_project/plugin-tests/plugin-tests.tscn" ]; then
            echo "Error: Test scene $WORKSPACE/test_project/plugin-tests/plugin-tests.tscn not found"
            exit 1
          fi

      # Platform-specific Test GDExtension steps

      - name: Test GDExtension - Linux
        if: ${{ matrix.target.platform == 'linux' }}
        shell: bash
        run: |
          TEST_PROJECT_PATH="${{ github.workspace }}/test_project"
          TEST_SCENE_PATH="${{ github.workspace }}/test_project/plugin-tests/plugin-tests.tscn"
          "${GODOT_EXECUTABLE}" --headless --path "$TEST_PROJECT_PATH" "$TEST_SCENE_PATH"

      - name: Test GDExtension - Windows
        if: ${{ matrix.target.platform == 'windows' }}
        shell: bash
        run: |
          TEST_PROJECT_PATH=$(cygpath -u "${{ github.workspace }}\\test_project")
          TEST_SCENE_PATH=$(cygpath -u "${{ github.workspace }}\\test_project\\plugin-tests\\plugin-tests.tscn")
          "${GODOT_EXECUTABLE}" --headless --path "$TEST_PROJECT_PATH" "$TEST_SCENE_PATH"

      - name: Test GDExtension - macOS
        if: ${{ matrix.target.platform == 'macos' }}
        shell: bash
        run: |
          TEST_PROJECT_PATH="${{ github.workspace }}/test_project"
          TEST_SCENE_PATH="${{ github.workspace }}/test_project/plugin-tests/plugin-tests.tscn"
          "${GODOT_EXECUTABLE}" --headless --path "$TEST_PROJECT_PATH" "$TEST_SCENE_PATH"

      # Upload the build
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: godot-cpp-template-${{ matrix.target.platform }}-${{ matrix.target.arch }}-${{ matrix.float-precision }}-${{ matrix.target-type }}-${{ (matrix.target.threads != null && matrix.target.threads != '') && format('{0}', matrix.target.threads) || '' }}
          path: |
            ${{ github.workspace }}/bin/**

  # Merges all the build artifacts together into a single godot-cpp-template artifact.
  # If you comment out this step, all the builds will be uploaded individually.
  merge:
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: godot-cpp-template
          pattern: godot-cpp-template-*
          delete-merged: true