name: Build GDExtension CROSS PLATFORM PLUGIN
on:
  workflow_dispatch:

env:
  PLUGIN_NAME: "plugin_name_goes_here" # Replace with your plugin name (must match .gdextension file name)

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # A build is made for every possible combination of parameters
        # You can add or remove entries from the arrays of each parameter to customize which builds you want to run
        # See https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/running-variations-of-jobs-in-a-workflow
        target:
          [
            { platform: linux, arch: x86_32, os: ubuntu-22.04 },
            { platform: linux, arch: x86_64, os: ubuntu-22.04 },
          #  { platform: linux, arch: arm32, os: ubuntu-22.04-arm },
          #  { platform: linux, arch: arm64, os: ubuntu-22.04-arm },
          #  { platform: windows, arch: x86_32, os: windows-latest },
          #  { platform: windows, arch: x86_64, os: windows-latest },
          #  { platform: windows, arch: arm64, os: windows-latest },
          #  { platform: macos, arch: universal, os: macos-latest },
          #  { platform: android, arch: x86_64, os: ubuntu-22.04 },
          #  { platform: android, arch: arm32, os: ubuntu-22.04 },
          #  { platform: android, arch: arm64, os: ubuntu-22.04 },
          #  { platform: ios, arch: arm64, os: macos-latest },
           { platform: web, arch: wasm32, os: ubuntu-22.04, threads: disabled },
           { platform: web, arch: wasm32, os: ubuntu-22.04, threads: enabled }
          ]
        target-type: [template_debug] #template_release]
        float-precision: [single] #[double] -> if you need double precision, you can uncomment this line and add it to the matrix

    runs-on: ${{ matrix.target.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install multilib support
        if: ${{ matrix.target.platform == 'linux' && matrix.target.arch == 'x86_32' }}
        run: |
          sudo apt-get update && sudo apt-get install -y gcc-multilib g++-multilib

      # Setup dependencies
      - name: Setup godot-cpp
        uses: ./godot-cpp/.github/actions/setup-godot-cpp
        with:
          platform: ${{ matrix.target.platform }}
          em-version: 3.1.62

      - name: Restore .scons_cache
        uses: ./godot-cpp/.github/actions/godot-cache-restore
        with:
          scons-cache: ${{ github.workspace }}/.scons-cache/
          cache-name: ${{ matrix.target.platform }}_${{ matrix.target.arch }}_${{ matrix.float-precision }}_${{ matrix.target-type }}${{ (matrix.target.platform == 'web' && matrix.target.threads == 'enabled') && '.threads' || '' }}

      - name: Build GDExtension
        shell: sh
        env:
          SCONS_CACHE: ${{ github.workspace }}/.scons-cache/
        run: |
          THREADS_FLAG=""
          if [ "${{ matrix.target.platform }}" = "web" ]; then
            if [ "${{ matrix.target.threads }}" = "enabled" ]; then
              THREADS_FLAG=" threads=yes"
            else
              THREADS_FLAG=" threads=no"
            fi
          fi
          scons target=${{ matrix.target-type }} platform=${{ matrix.target.platform }} arch=${{ matrix.target.arch }} precision=${{ matrix.float-precision }}$THREADS_FLAG

      - name: Save .scons_cache
        uses: ./godot-cpp/.github/actions/godot-cache-save
        with:
          scons-cache: ${{ github.workspace }}/.scons-cache/
          cache-name: ${{ matrix.target.platform }}_${{ matrix.target.arch }}_${{ matrix.float-precision }}_${{ matrix.target-type }}${{ (matrix.target.platform == 'web' && matrix.target.threads == 'enabled') && '_threads' || '' }}

      - name: Windows - Delete compilation files
        if: ${{ matrix.target.platform == 'windows' }}
        shell: pwsh
        run: Remove-Item bin/* -Include *.exp,*.lib,*.pdb -Force

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.binary_name }}
          path: ${{ steps.build.outputs.binary_path }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          # Exact platform bin folder â€” preserves real file names
          name: "${{ env.PLUGIN_NAME }}.${{ matrix.target.platform }}.${{ matrix.target.target-type }}.${{ matrix.target.arch }}.${{ matrix.target.float-precision }}${{ (matrix.target.platform == 'web' && matrix.target.threads == 'enabled') && '.threads' || '' }}"
          path: ${{ github.workspace }}/bin/${{ matrix.target.platform }}/**

  merge:
    runs-on: ubuntu-22.04
    needs: build
    env:
      PLUGIN_NAME: plugin_name_goes_here
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Get artifact names
        id: artifact_list
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            return artifacts.data.artifacts.map(a => a.name).join("\n");

      - name: Create final bin folder
        run: mkdir -p "${{ env.PLUGIN_NAME }}/bin"

      - name: Download and merge artifacts
        shell: bash
        run: |
          echo "${ARTIFACT_NAMES}" | while read -r name; do
            [ -z "$name" ] && continue
            echo "Downloading: $name"
            tmp_dir="tmp/$name"
            mkdir -p "$tmp_dir"
            gh run download ${{ github.run_id }} --name "$name" --dir "$tmp_dir"

            # Detect platform from filename (works for ios/macos/web/etc.)
            platform=$(echo "$name" | grep -Eo 'linux|windows|macos|ios|android|web')
            if [ -z "$platform" ]; then
              echo "Could not detect platform for $name" >&2
              continue
            fi

            target_dir="${{ env.PLUGIN_NAME }}/bin/$platform"
            mkdir -p "$target_dir"

            # Copy exactly, preserving folder structure
            cp -r "$tmp_dir"/* "$target_dir/"
          done
        env:
          GH_TOKEN: ${{ github.token }}
          ARTIFACT_NAMES: ${{ steps.artifact_list.outputs.result }}

