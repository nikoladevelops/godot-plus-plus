name: Build GDExtension (Debug)
on:
  workflow_dispatch:

env:
  PLUGIN_NAME: "plugin_name_goes_here" # Replace with your plugin name (must match .gdextension file name)

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # A build is made for every possible combination of parameters
        # You can add or remove entries from the arrays of each parameter to customize which builds you want to run
        # See https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/running-variations-of-jobs-in-a-workflow
        target:
          [
           { platform: linux, arch: x86_32, os: ubuntu-22.04 },
           { platform: linux, arch: x86_64, os: ubuntu-22.04 },
           { platform: linux, arch: arm32, os: ubuntu-22.04-arm },
           { platform: linux, arch: arm64, os: ubuntu-22.04-arm },
           { platform: windows, arch: x86_32, os: windows-latest },
           { platform: windows, arch: x86_64, os: windows-latest },
           { platform: windows, arch: arm64, os: windows-latest },
           { platform: macos, arch: universal, os: macos-latest },
           { platform: android, arch: x86_64, os: ubuntu-22.04 },
           { platform: android, arch: arm32, os: ubuntu-22.04 },
           { platform: android, arch: arm64, os: ubuntu-22.04 },
           { platform: ios, arch: arm64, os: macos-latest },
           { platform: web, arch: wasm32, os: ubuntu-22.04, threads: disabled },
           { platform: web, arch: wasm32, os: ubuntu-22.04, threads: enabled }
          ]
        target-type: [template_debug] #template_release]
        float-precision: [single] #[double] -> if you need double precision, you can uncomment this line and add it to the matrix

    runs-on: ${{ matrix.target.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install multilib support
        if: ${{ matrix.target.platform == 'linux' && matrix.target.arch == 'x86_32' }}
        run: |
          sudo apt-get update && sudo apt-get install -y gcc-multilib g++-multilib

      # Setup dependencies
      - name: Setup godot-cpp
        uses: ./godot-cpp/.github/actions/setup-godot-cpp
        with:
          platform: ${{ matrix.target.platform }}
          em-version: 3.1.62

      - name: Restore .scons_cache
        uses: ./godot-cpp/.github/actions/godot-cache-restore
        with:
          scons-cache: ${{ github.workspace }}/.scons-cache/
          # append ".threads" only for web+enabled so cache keys are unique and match artifact naming
          cache-name: ${{ matrix.target.platform }}_${{ matrix.target.arch }}_${{ matrix.float-precision }}_${{ matrix.target-type }}${{ (matrix.target.platform == 'web' && matrix.target.threads == 'enabled') && '.threads' || '' }}

      - name: Build GDExtension Debug Build
        shell: bash
        env:
          SCONS_CACHE: ${{ github.workspace }}/.scons-cache/
        run: |
          # Map matrix threads values (enabled/disabled) to a SCons-friendly flag.
          # We only pass threads=yes when the matrix indicates web+enabled.
          THREADS_FLAG=""
          if [ "${{ matrix.target.platform }}" = "web" ]; then
            if [ "${{ matrix.target.threads }}" = "enabled" ]; then
              THREADS_FLAG=" threads=yes"
            else
              # omit the threads flag entirely for disabled (don't pass threads=no)
              THREADS_FLAG=""
            fi
          fi

          # Run scons with the computed THREADS_FLAG. Note: THREADS_FLAG intentionally has no '.' â€”
          # dot is only for artifact naming, not for scons flags.
          scons target=${{ matrix.target-type }} platform=${{ matrix.target.platform }} arch=${{ matrix.target.arch }} precision=${{ matrix.float-precision }}$THREADS_FLAG

      - name: Save .scons_cache
        uses: ./godot-cpp/.github/actions/godot-cache-save
        with:
          scons-cache: ${{ github.workspace }}/.scons-cache/
          cache-name: ${{ matrix.target.platform }}_${{ matrix.target.arch }}_${{ matrix.float-precision }}_${{ matrix.target-type }}${{ (matrix.target.platform == 'web' && matrix.target.threads == 'enabled') && '.threads' || '' }}

      # Clean up compilation files
      - name: Windows - Delete compilation files
        if: ${{ matrix.target.platform == 'windows' }}
        shell: pwsh
        run: |
          Remove-Item bin/* -Include *.exp,*.lib,*.pdb -Force

      # Upload the build
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          # naming uses '.' separators; add ".threads" (with leading dot) only for web+enabled
          name: lib${{ env.PLUGIN_NAME }}.${{ matrix.target.platform }}.${{ matrix.target-type }}.${{ matrix.target.arch }}${{ (matrix.target.platform == 'web' && matrix.target.threads == 'enabled') && '.threads' || '' }}.${{ matrix.float-precision }}
          path: |
            ${{ github.workspace }}/bin/**

  # Merges all the build artifacts together into a single artifact.
  # If you comment out this step, all the builds will be uploaded individually.
  merge:
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          # download ALL artifacts from all jobs; merge-multiple ensures they land together
          merge-multiple: true
          path: artifacts_tmp

      - name: Prepare final bin folder
        run: |
          rm -rf bin || true
          mkdir -p bin

      - name: Install unzip (for extracting any zipped artifacts)
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip

      - name: Merge/extract downloaded artifacts into bin/
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob

          for item in artifacts_tmp/*; do
            if [ -d "$item" ]; then
              # If a directory was downloaded, copy its contents into bin/
              cp -a "$item/." bin/
            elif [ -f "$item" ]; then
              case "$item" in
                *.zip)
                  tmpdir="$(mktemp -d)"
                  unzip -o "$item" -d "$tmpdir"
                  # If the extracted archive has a top-level bin/, merge it; otherwise merge all contents
                  if [ -d "$tmpdir/bin" ]; then
                    cp -a "$tmpdir/bin/." bin/
                  else
                    cp -a "$tmpdir/." bin/
                  fi
                  rm -rf "$tmpdir"
                  ;;
                *)
                  # regular file (dll, so, wasm, etc.) -> copy into bin/
                  cp -a "$item" bin/
                  ;;
              esac
            fi
          done

      - name: Copy .gdextension file next to bin/
        run: |
          src="test_project/${{ env.PLUGIN_NAME }}/${{ env.PLUGIN_NAME }}.gdextension"
          dst="./${{ env.PLUGIN_NAME }}.gdextension"
          if [ -f "$src" ]; then
            cp "$src" "$dst"
          else
            echo "Warning: .gdextension not found at $src"
          fi

      - name: Create final zip (single zip only)
        shell: bash
        run: |
          ZIP_NAME="${{ env.PLUGIN_NAME }}.zip"
          # include LICENSE.md in the zip only if it exists in repo root
          if [ -f "LICENSE.md" ]; then
            zip -r "$ZIP_NAME" bin "${{ env.PLUGIN_NAME }}.gdextension" LICENSE.md
          else
            zip -r "$ZIP_NAME" bin "${{ env.PLUGIN_NAME }}.gdextension"
          fi

      - name: Upload final zip
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.PLUGIN_NAME }}"
          path: "${{ env.PLUGIN_NAME }}.zip"
